(deftheme my-misterioso
  "Terminal with light background.")

(defun smf-color (color-num)
  "Return the color name from a color number."
  (if (display-graphic-p)
      (let (r g b)
        (setq color-num (- color-num 16))
        (if (< color-num 216)
            (progn
              (setq r (/ color-num 36)
                    g (/ (mod color-num 36) 6)
                    b (mod color-num 6))
              (setq r (if (zerop r) 0 (+ (* r 40) 55)))
              (setq g (if (zerop g) 0 (+ (* g 40) 55)))
              (setq b (if (zerop b) 0 (+ (* b 40) 55))))
          (setq r (+ (* (- color-num 216) 10) 8)
                g r
                b r))
        (format "#%02X%02X%02X" r g b))
    (format "color-%d" color-num)))

(defface caution
  `((t :foreground ,(smf-color 215) :background ,(smf-color 94)))
  "Caution face."
  :group 'faces)

(let ((dark '((class color) (background dark)))
      (light '((class color) (background light))))
  (custom-theme-set-faces
   'my-misterioso

   `(Man-overstrike                      ((t :inherit link)))
   `(Man-underline                       ((t :inherit font-lock-variable-name-face)))
   `(avy-lead-face                       ((,dark :foreground "white" :background ,(smf-color 161) :slant normal)))
   `(avy-lead-face-0                     ((,dark :foreground "white" :background ,(smf-color 25) :slant normal)))
   `(bm-face                             ((,dark :background ,(smf-color 17))))
   `(compilation-column-number           ((t :inherit font-lock-variable-name-face)))
   `(compilation-error                   ((t :inherit error)))
   `(compilation-info                    ((t :inherit link)))
   `(compilation-line-number             ((t :inherit font-lock-preprocessor-face)))
   `(compilation-mode-line-exit          ((t :inherit success)))
   `(compilation-mode-line-fail          ((t :inherit error)))
   `(compilation-mode-line-run           ((t :inherit warning)))
   `(compilation-warning                 ((t :inherit warning)))
   `(ediff-fine-diff-A                   ((,dark :background ,(smf-color 52))))
   `(ediff-fine-diff-B                   ((,dark :background ,(smf-color 22))))
   `(error                               ((,dark :foreground ,(smf-color 210) :background ,(smf-color 52))))
   `(escape-glyph                        ((,dark :foreground ,(smf-color 166))))

   ;; `(default ((,dark (:background "color-237" :foreground "color-254"))))  gray-18
   `(font-lock-builtin-face       ((,dark :foreground "color-44")))
   `(font-lock-comment-face       ((,dark :foreground "color-107" :slant italic)))
   `(font-lock-constant-face      ((,dark :foreground "color-30")))
   `(font-lock-function-name-face ((,dark :foreground "color-50" :weight bold)))
   `(font-lock-keyword-face       ((,dark :foreground "color-214" :weight bold)))
   `(font-lock-string-face        ((,dark :foreground "color-166")))
   `(font-lock-type-face          ((,dark :foreground "color-80")))
   `(font-lock-variable-name-face ((,dark :foreground "color-186")))

   `(font-lock-comment-delimiter-face    ((t :inherit font-lock-comment-face)))
   `(font-lock-doc-face                  ((,dark :foreground ,(smf-color 223))))
   `(font-lock-doc-string-face           ((t :inherit font-lock-doc-face)))
   `(font-lock-preprocessor-face         ((,dark :foreground ,(smf-color 220))))
   `(font-lock-regexp-grouping-backslash ((t :weight bold)))
   `(font-lock-regexp-grouping-construct ((t :weight bold)))
   `(font-lock-warning-face              ((t :inherit warning)))

   `(header-line                         ((,dark :foreground "white" :background "black")))
   `(highlight                           ((t :inherit region)))
   `(hl-line                             ((,dark (:background ,(smf-color 237) :inherit nil))))
   `(ido-first-match                     ((t :inherit warning)))
   `(ido-only-match                      ((t :inherit success)))
   `(ido-subdir                          ((t :inherit font-lock-keyword-face)))
   `(isearch                             ((,dark :foreground ,(smf-color 231) :background ,(smf-color 203))))
   `(js2-error                           ((t :inherit error)))
   `(js2-external-variable               ((t :inherit warning)))
   `(js2-function-param                  ((t :inherit font-lock-variable-name-face)))
   `(js2-jsdoc-tag                       ((,dark :foreground "color-66" :slant italic)))
   `(js2-jsdoc-type                      ((,dark :foreground "color-67" :slant italic)))
   `(js2-jsdoc-value                     ((,dark :foreground "color-180" :slant italic)))
   `(js2-warning                         ((t :inherit warning)))
   `(lazy-highlight                      ((,dark :foreground "white" :background ,(smf-color 66))))
   `(link                                ((,dark :foreground ,(smf-color 81) :slant italic :underline t)))
   `(link-visited                        ((,dark :foreground ,(smf-color 212) :slant italic :underline t)))
   `(linum                               ((,dark :foreground ,(smf-color 143) :background "black" :slant italic)))
   `(magit-diff-file-heading             ((t :weight normal)))
   `(magit-section-heading               ((,dark :foreground ,(smf-color 222))))
   `(match                               ((,dark :foreground "white" :background ,(smf-color 62))))
   `(minibuffer-prompt                   ((t :inherit font-lock-keyword-face)))
   `(mode-line                           ((t :foreground ,(smf-color 231) :background ,(smf-color 24))))
   `(mode-line-buffer-id                 ((t :foreground ,(smf-color 220))))
   `(mode-line-inactive                  ((t :foreground ,(smf-color 231) :background ,(smf-color 102))))
   `(my-debug-face                       ((t :inherit caution)))
   `(my-ibuffer-read-only-face           ((t :inherit caution)))
   `(my-read-only-face                   ((t :inherit caution)))
   `(outline-1                           ((,dark :foreground ,(smf-color 45))))
   `(outline-2                           ((,dark :foreground ,(smf-color 44))))
   `(outline-3                           ((,dark :foreground ,(smf-color 43))))
   `(outline-4                           ((,dark :foreground ,(smf-color 42))))
   `(outline-5                           ((,dark :foreground ,(smf-color 41))))
   `(region                              ((,dark :foreground ,(smf-color 231) :background ,(smf-color 31))))
   `(show-mark-face                      ((,dark :foreground nil :background ,(smf-color 23))))
   `(show-paren-match-face               ((t :inherit success)))
   `(show-paren-mismatch-face            ((t :inherit error)))
   `(sqlplus-table-head-face             ((,dark :foreground ,(smf-color 45) :background "black" :slant italic)))
   `(success                             ((,dark :foreground ,(smf-color 120) :background ,(smf-color 22))))
   `(trailing-whitespace                 ((,dark :foreground ,(smf-color 245) :background ,(smf-color 236))))
   `(underline                           ((t :underline t)))
   `(warning                             ((,dark :foreground ,(smf-color 226) :background ,(smf-color 58))))
   `(web-mode-html-attr-custom-face      ((,dark :foreground ,(smf-color 106))))
   `(web-mode-html-attr-equal-face       ((t :inherit web-mode-html-attr-name-face)))
   `(web-mode-html-attr-name-face        ((,dark :foreground ,(smf-color 108))))
   `(web-mode-html-attr-value-face       ((,dark :foreground ,(smf-color 137))))
   `(web-mode-html-tag-bracket-face      ((t :inherit web-mode-html-tag-face)))
   `(web-mode-html-tag-face              ((,dark :foreground ,(smf-color 110))))
   `(whitespace-empty                    ((t :inherit trailing-whitespace)))
   `(whitespace-tab                      ((t :inherit trailing-whitespace)))
   `(whitespace-trailing                 ((t :inherit trailing-whitespace)))

   ))

(provide-theme 'my-misterioso)
